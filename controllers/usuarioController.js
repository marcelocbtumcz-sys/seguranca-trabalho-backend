const db = require("../db");

// üîπ Listar usu√°rios
exports.listarUsuarios = async (req, res) => {
  try {
    const [rows] = await db.query("SELECT id, nome, usuario, email FROM usuario");
    res.json(rows);
  } catch (err) {
    console.error("‚ùå Erro ao buscar usu√°rios:", err);
    res.status(500).json({ error: "Erro ao buscar usu√°rios" });
  }
};

// üîπ Cadastrar usu√°rio
exports.cadastrarUsuario = async (req, res) => {
  try {
    const { nome, usuario, email, senha } = req.body;

    if (!nome || !usuario || !email || !senha) {
      return res.status(400).json({ error: "Todos os campos s√£o obrigat√≥rios" });
    }

    const sql = "INSERT INTO usuario (nome, usuario, email, senha) VALUES (?, ?, ?, ?)";
    const [result] = await db.query(sql, [nome, usuario, email, senha]);

    res.json({
      message: "‚úÖ Usu√°rio cadastrado!",
      id: result.insertId,
      nome,
      usuario,
      email
    });

  } catch (err) {
    console.error("‚ùå Erro ao salvar usu√°rio:", err);

    if (err.code === "ER_DUP_ENTRY") {
      if (err.sqlMessage.includes("usuario_UNIQUE")) {
        return res.status(400).json({ error: "‚ö†Ô∏è Usu√°rio j√° cadastrado!" });
      }
      if (err.sqlMessage.includes("email_UNIQUE")) {
        return res.status(400).json({ error: "‚ö†Ô∏è Email j√° cadastrado!" });
      }
      return res.status(400).json({ error: "‚ö†Ô∏è Usu√°rio ou email j√° cadastrados!" });
    }

    res.status(500).json({ error: "Erro ao salvar usu√°rio" });
  }
};

// üîπ Excluir usu√°rio
exports.excluirUsuario = async (req, res) => {
  try {
    const { id } = req.params;

    const sql = "DELETE FROM usuario WHERE id = ?";
    const [result] = await db.query(sql, [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "‚ö†Ô∏è Usu√°rio n√£o encontrado!" });
    }

    res.json({ message: "‚úÖ Usu√°rio exclu√≠do!" });

  } catch (err) {
    console.error("‚ùå Erro ao excluir usu√°rio:", err);
    res.status(500).json({ error: "Erro ao excluir usu√°rio" });
  }
};
